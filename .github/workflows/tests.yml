name: tests

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - '*'

jobs:
  Tests:
    name: Tests
    runs-on: macOS-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer
      PROJECT: VirgilCrypto.xcodeproj
    strategy:
      matrix:
        include:
          - destination: "OS=17.0,name=iPhone 14 Pro"
            prefix: "iOS"
            test: "1"
          - destination: "arch=x86_64"
            prefix: "macOS"
            test: "1"
          - destination: "OS=17.0,name=Apple TV"
            prefix: "tvOS"
            test: "1"
          - destination: "OS=10.0,name=Apple Watch Series 7 - 45mm"
            prefix: "watchOS"
            test: "0"
          - destination: "generic/platform=iOS"
            prefix: "iOS"
            test: "0"
          - destination: "generic/platform=tvOS"
            prefix: "tvOS"
            test: "0"
          - destination: "generic/platform=watchOS"
            prefix: "watchOS"
            test: "0"
    steps:
      - uses: actions/checkout@v3
      - name: Run ${{ matrix.prefix }} Tests
        run: |
            set -o pipefail
            SCHEME="VirgilCrypto ${{ matrix.prefix }}"

            if [ "${{ matrix.test }}" == "1" ]; then
                # Build Framework
                xcodebuild -verbose -project "$PROJECT" -scheme "$SCHEME" -destination "${{ matrix.destination }}" -configuration Debug clean build-for-testing | xcpretty;
                # Run Tests
                xcodebuild -verbose -project "$PROJECT" -scheme "$SCHEME" -destination "${{ matrix.destination }}" -configuration Debug test-without-building | xcpretty;
            else
                xcodebuild -verbose -project "$PROJECT" -scheme "$SCHEME" -destination "${{ matrix.destination }}" -configuration Release clean build | xcpretty;
            fi
  SPM:
    runs-on: macOS-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v3
      - run: brew install coreutils # install 'timeout' utility
      - run: swift --version
      - run: timeout 5m bash -c 'until swift build; do rm -fr .build && sleep 10; done' # fix for Swift Package Manager when it fails to download binary targets
      - run: swift test
